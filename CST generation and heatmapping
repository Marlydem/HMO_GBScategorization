%%%%%%%%%%%%%%%%%%%%%%%%%% R studio %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  "Community State Types Baseline"
#perform in R
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra) # clustering visualization
library(dendextend) # for comparing two dendrograms

library(rbiom)
library(vegan) #This is vegan 2.5-6
library(phyloseq)
library(ggplot2)

setwd("~/Desktop")




%%%%%%%%%%%%%%%%%%% on Baseline dataset %%%%%%%%%%%%%%%%%%%

OTU_1900_Baseline <- read.csv("Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/HMO_GBS_CST/exported/RelFreq_1900_Baseline/RelFreq_taxahead_Baseline.csv", header=TRUE, sep = ",", row.names="sample_name")
meta_BL <- read.csv("Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/sample_metadata_Baseline.csv")

setwd("~/Desktop/Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/HMO_GBS_CST")

d <- dist(OTU_1900_Baseline, method= "euclidean")
fit <- hclust(d, method="ward.D")
quartz()
plot(fit)

# Determine number of clusters
wss <- (nrow(OTU_1900_Baseline-1)*sum(apply(OTU_1900_Baseline,2,var)))
for (i in 2:15) wss[i] <- sum(kmeans(OTU_1900_Baseline,
                                     centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
fviz_nbclust(OTU_1900_Baseline, FUNcluster = kmeans)

#Return to main code
group3 <- cutree(fit, k=3)
group4 <- cutree(fit, k=4)
group5 <- cutree(fit, k=5)
group6 <- cutree(fit, k=6)
table(group3) # Number of members in each cluster
table(group4)
table(group5)
table(group6)

plot(fit)
rect.hclust(fit, k=3, border="yellow")
rect.hclust(fit, k=4, border="red")
rect.hclust(fit, k=5, border="green")
rect.hclust(fit, k=6, border="blue")

fitplot5 <- kmeans(OTU_1900_Baseline, 5) # 5 cluster solution
fviz_cluster(fitplot5, OTU_1900_Baseline) #view PCA

print(group5)   
write.csv(group5,"CST_BL_mapping.csv")
#Manually add first column heading "Sample_id"
#merge the two tables metadata and CST
CST_BLmapping <- read.csv("CST_BL_mapping.csv.csv", header=TRUE, sep = ",", row.names="sample_name")
CST_BLmetadata <- read.csv("CST_metadata_Baseline.csv", header=TRUE, sep = ",", row.names="sample_name")


topN = 15
OTU_1900_BaselineT <- t(OTU_1900_Baseline)
OTU_1900_BaselineTtaxa <- otu_table(OTU_1900_BaselineT, taxa_are_rows = TRUE)
most_abundant_taxaBL = sort(taxa_sums(OTU_1900_BaselineTtaxa), TRUE)[1:topN]
print(most_abundant_taxaBL)
write.csv(most_abundant_taxaBL,"top15BL_taxa.csv")

most_abundant_taxa20BL = sort(taxa_sums(OTU_1900_BaselineTtaxa), TRUE)[1:20]
print(most_abundant_taxa20BL)
write.csv(most_abundant_taxa20BL,"top20BL_taxa.csv")

most_abundant_taxa30BL = sort(taxa_sums(OTU_1900_BaselineTtaxa), TRUE)[1:30]
print(most_abundant_taxa30BL)
write.csv(most_abundant_taxa25BL,"top30BL_taxa.csv")

#Use this to see what indices I need to remove or combine into "other" in the rarefied taxahead dataset

%%Rename the CST values accordingly%%
  # CST I: Staphylococcus
  # CST II: Staph-Enterococcus
  # CST III: Enterococcus
  #CST IV: Lactobacillus
  #CST V: High alpha diversity, heterogenous bacteria
  #CST VI: GBS
  

  #First changed to CST and then back to numeric

OTU_BLre_ordername <- read.csv("exported/RelFreq_1900_Baseline/RelFreq_toptaxahead_Baseline.csv", header=TRUE, sep = ",", row.names="sample_name")

%%HEATMAP%%
  
install.packages("RColorBrewer")
library("RColorBrewer")
library("grDevices")
install.packages("plasma")
library("plasma")

OTU_reno_clustBL_matrix <- as.matrix(OTU_BLre_ordername)
heatmap(OTU_reno_clustBL_matrix) #sideways without CST categorization

#will use mapping and shortened df (Other)
#the all-encompassing code!!!!!!!!
#tochangeCST in Excel =IF(B2=1,"I",IF(B2=2,"V",IF(B2=3,"III",IF(B2=4,"II",IF(B2=5,"IV",FALSE)))))
      # mycol_BL <- c("tomato","orange","lightseagreen","royalblue","yellow","#c51b8a")
      # colSideBLx <- mycol[my_groupBL]
      # my_groupBLre <- as.numeric(as.factor(substr(CST_BLmetadata$CSTrenum,1,1)))
      # colSideBLre <- mycolre[my_groupBLre]

my_group_BL <- as.numeric(as.factor(substr(CST_BLmapping$x,1,1)))
mycol <- c("tomato","yellow","lightseagreen","orange","royalblue","#c51b8a")
colSide_BL <- mycol[my_group_BL]

heatmap(OTU_reno_clustBL_matrix, cexCol = 0.8, RowSideColors=colSide_BL, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"), Rowv=CST_BLmetadata$CSTrom)


#alltaxa
OTU_1900matrix <- as.matrix(OTU_1900_Baseline)
heatmap(OTU_1900matrix, RowSideColors=colSideBL3, cexCol= 0.8, scale='none', Colv= most_abundant_taxa20BL, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"))


OTU_BL_top35ordername <- read.csv("exported/RelFreq_1900_Baseline/RelFreq_top35taxahead_Baseline.csv", header=TRUE, sep = ",", row.names="sample_name")
OTU_BL_top35matrix <- as.matrix(OTU_BL_top35ordername)
heatmap(OTU_BL_top35matrix, cexCol = 0.8, RowSideColors=colSide_BL, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"))

# circlize heatmap(OTU_BL_top35matrix, cexCol = 0.8, RowSideColors=colSide_BL, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"), heatmap_legend_param = list(title = "Abundance", at = c(0,0.5,1), labels = c("0", "0.5", "1")), top_annotation = HeatmapAnnotation(CST = c(1,2,3,4,5), annotation_legend_param = list(CST = list(title = "CST"))))

#also saved png
tiff(file="Heatmap_Baseline.tif")
heatmap(OTU_BL_top35matrix, cexCol = 0.8, RowSideColors=colSide_BL, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"))
dev.off()

%%%%%%%%%%%%%%% on GBS dataset %%%%%%%%%%%%%%%
#########################################################3
  
%%GBS from Study 16 alone%%
setwd("~/Desktop")

OTU_1900_GBSstudy <- read.csv("Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/HMO_GBS_CST/exported/RelFreq_1900_GBSstudy/RelFreq_taxahead_GBSstudy.csv", header=TRUE, sep = ",", row.names="sample_name")
meta_GBSstudy <- read.csv("Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/sample_metadata_GBSstudy.csv")

setwd("~/Desktop/Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/HMO_GBS_CST")

dGBSst16 <- dist(OTU_1900_GBSstudy, method= "euclidean")
fitGBSst16 <- hclust(dGBSst16, method="ward.D")
quartz()
plot(fitGBSst16)

# Determine number of clusters
wssGBSst16 <- (nrow(OTU_1900_GBSstudy-1)*sum(apply(OTU_1900_GBSstudy,2,var)))
for (i in 2:15) wssGBSst16[i] <- sum(kmeans(OTU_1900_GBSstudy,
                                            centers=i)$withinss)
#the above two lines didn't work, so skipped and we decided on 6 groups anyways...
plot(1:15, wssGBSst16, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
fviz_nbclust(OTU_1900_GBSstudy, FUNcluster = kmeans)

#Return to main code
group3GBSst16 <- cutree(fitGBSst16, k=3)
group4GBSst16 <- cutree(fitGBSst16, k=4)
group5GBSst16 <- cutree(fitGBSst16, k=5)
group6GBSst16 <- cutree(fitGBSst16, k=6)
table(group3GBSst16) # Number of members in each cluster
table(group4GBSst16)
table(group5GBSst16)
table(group6GBSst16)

plot(fitGBSst16)
rect.hclust(fitGBSst16, k=3, border="yellow")
rect.hclust(fitGBSst16, k=4, border="red")
rect.hclust(fitGBSst16, k=5, border="green")
rect.hclust(fitGBSst16, k=6, border="Blue")

fitplot6GBSst16 <- kmeans(OTU_1900_GBSstudy, 6) # 6 cluster solution
fviz_cluster(fitplot6GBSst16, OTU_1900_GBSstudy) #view PCA

distanceGBS <- get_dist(OTU_1900_GBSstudy)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))


print(group6GBSst16)   
write.csv(group6GBSst16,"CST_GBSst16_mappingPAPER.csv")
#merge the two tables- OTU_1900_Combined and CST_CB_mapping.csv ,- read in as such
#Manually add first column heading "Sample_id"
CST_CBmapping <- read.csv("CST_GBSst16_mappingPAPER.csv", header=TRUE, sep = ",", row.names="Sample_id")

topN = 15
OTU_1900_comb_GBSst16T <- t(OTU_1900_Combined_study16)
OTU_1900_comb_GBSst16Ttaxa <- otu_table(OTU_1900_comb_GBSst16T, taxa_are_rows = TRUE)
most_abundant_taxaCBst16 = sort(taxa_sums(OTU_1900_comb_GBSst16Ttaxa), TRUE)[1:topN]
print(most_abundant_taxaCBstudy16)
write.csv(most_abundant_taxaCB,"top15CBs16_taxa.csv")

most_abundant_taxa20CBst16 = sort(taxa_sums(OTU_1900_comb_GBSst16Ttaxa), TRUE)[1:20]
print(most_abundant_taxa20CBst16)
write.csv(most_abundant_taxa20CBst16,"top20CB_taxa.csv")

OTU_1900_comb_GBSst16_Other <- read.csv("RE_Rarefied_1900_filtrelfreq_combined/RE_OTU_1900_TaxaHeadCombined_consolidatedOTHER_study16PAPER.csv", header=TRUE, sep = ",", row.names="Sample_id")

#Use this to see what indices I need to remove or combine into "other"

%%Rename the CST values accordingly%%
  # CST I: Staphylococcus
  # CST II: Staph-Enterococcus
  # CST III: Enterococcus
  #CST IV: Lactobacillus
  #CST V: High alpha diversity, heterogenous bacteria
  #CST VI: GBSst16
  
  %%HEATMAP%%
  
  OTU_clustCB_matrix <- as.matrix(OTU_1900_comb_GBSst16_Other)
heatmap(OTU_clustCB_matrix) #sideways without CST categorization

#will use mapping (CST_CBmapping) and shortened df (OTU_1900_comb_GBSst16_Other)
#the all-encompassing code!!!!!!!!
my_groupGBSst16 <- as.numeric(as.factor(substr(CST_CBmapping$x,1,1)))
colSideGBSst16 <- brewer.pal(12, "Set3")[my_groupGBSst16]
colMainGBSst16 <- colorRampPalette(brewer.pal(8, "Reds"))(25)
heatmap(OTU_clustCB_matrix, RowSideColors=colSideGBSst16, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"), Rowv= CST_CBmapping$CST_x)


my_groupTRXst16 <- as.numeric(as.factor(substr(CST_CBmapping$trx,1,1)))
colSideTRXst16 <- brewer.pal(4, "Set1")[my_groupTRXst16]

heatmap(OTU_clustCB_matrix, RowSideColors=colSideGBSst16, , Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"), Rowv= CST_CBmapping$x)
heatmap(OTU_clustCB_matrix, RowSideColors=colSideTRXst16, cexCol = 0.8, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"), reorderfun = function(d, w) reorder(d, w))






##############################################

%%GBS and previous datasets%%
 setwd("~/Desktop") 
OTU_1900_combined <- read.csv("Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/HMO_GBS_CST/exported/allMERGED", header=TRUE, sep = ",", row.names="sample_name")
meta_BL <- read.csv("Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/allMERGED.csv")

setwd("~/Desktop/Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/HMO_GBS_CST")

dGBS <- dist(OTU_1900_Combined, method= "euclidean")
fitGBS <- hclust(dGBS, method="ward.D")
quartz()
plot(fitGBS)

# Determine number of clusters
wssGBS <- (nrow(OTU_1900_Combined-1)*sum(apply(OTU_1900_Combined,2,var)))
for (i in 2:15) wssGBS[i] <- sum(kmeans(OTU_1900_Combined,
                                        centers=i)$withinss)
#the above two lines didn't work, so skipped and we decided on 6 groups anyways...
plot(1:15, wssGBS, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
fviz_nbclust(OTU_1900_Combined, FUNcluster = kmeans)

#Return to main code
group3GBS <- cutree(fitGBS, k=3)
group4GBS <- cutree(fitGBS, k=4)
group5GBS <- cutree(fitGBS, k=5)
group6GBS <- cutree(fitGBS, k=6)
table(group3GBS) # Number of members in each cluster
table(group4GBS)
table(group5GBS)
table(group6GBS)

plot(fitGBS)
rect.hclust(fitGBS, k=4, border="red")
rect.hclust(fitGBS, k=5, border="green")
rect.hclust(fitGBS, k=3, border="yellow")
rect.hclust(fitGBS, k=6, border="Blue")

fitplot6GBS <- kmeans(OTU_1900_Combined, 6) # 6 cluster solution
fviz_cluster(fitplot6GBS, OTU_1900_Combined) #view PCA

distance <- get_dist(OTU_1900_Combined)
fviz_dist(distance, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))


print(group6GBS)   
write.csv(group6GBS,"CST_CB_mapping.csv")
#merge the two tables- OTU_1900_Combined and CST_CB_mapping.csv ,- read in as such
#Manually add first column heading "Sample_id"
CST_CBmapping <- read.csv("CST_CB_mapping.csv", header=TRUE, sep = ",", row.names="Sample_id")


topN = 15
OTU_1900_CombinedT <- t(OTU_1900_Combined)
OTU_1900_CombinedTtaxa <- otu_table(OTU_1900_CombinedT, taxa_are_rows = TRUE)
most_abundant_taxaCB = sort(taxa_sums(OTU_1900_CombinedTtaxa), TRUE)[1:topN]
print(most_abundant_taxaCB)
write.csv(most_abundant_taxaCB,"top15CB_taxa.csv")

most_abundant_taxa20CB = sort(taxa_sums(OTU_1900_CombinedTtaxa), TRUE)[1:20]
print(most_abundant_taxa20CB)
write.csv(most_abundant_taxa20CB,"top20CB_taxa.csv")

OTU_1900_Combined_Other <- read.csv("RE_Rarefied_1900_filtrelfreq_Combined/RE_OTU_1900_TaxaHead_OtherConsolidated.csv", header=TRUE, sep = ",", row.names="Sample_id")
CST_CBmapping_mult <- read.csv("CST_CB_mapping_mult.csv", header=TRUE, sep = ",", row.names="Sample_id")

#Use this to see what indices I need to remove or combine into "other"

%%Rename the CST values accordingly%%
  # CST I: Staphylococcus
  # CST II: Staph-Enterococcus
  # CST III: Enterococcus
  #CST IV: Lactobacillus
  #CST V: High alpha diversity, heterogenous bacteria
  #CST VI: GBS
  
  
  #OTU_CBre_ordername['fitplot5.cluster'] <- OTU_CBre_ordername['fitplot5.cluster'].replace(['2','1','5','4','3'],['CST I','CST II','CST III','CST IV', 'CST V', 'CST VI'])
  #doesn't work, just manually adjusted and re-read
  #First changed to CST and then back to numeric


%%HEATMAP%%
  
  install.packages("RColorBrewer")
library("RColorBrewer")

OTU_clustCB_matrix <- as.matrix(OTU_1900_Combined_Other)
heatmap(OTU_clustCB_matrix) #sideways without CST categorization

#will use mapping (CST_CBmapping) and shortened df (OTU_1900_Combined_Other)
#the all-encompassing code!!!!!!!!
my_groupGBS <- as.numeric(as.factor(substr(CST_CBmapping$x,1,1)))
colSideGBS <- brewer.pal(12, "Set3")[my_groupGBS]
colMainGBS <- colorRampPalette(brewer.pal(8, "Reds"))(25)
heatmap(OTU_clustCB_matrix, RowSideColors=colSideGBS, Rowv=NULL)
#plot 2_ images all taxa, minus CST colum, but uses CST to order plot (already renamed by hand)
clust_order <- c( 1,2,3,4,5,6)

my_groupGBS2 <- as.numeric(as.factor(substr(CST_CBmapping_mult$CST_5,1,1)))
colSideGBS2 <- brewer.pal(12, "Set3")[my_groupGBS2]
heatmap(OTU_clustCB_matrix, RowSideColors=colSideGBS2, Colv= NA, Rowv= CST_CBmapping_mult$CST_5)
heatmap(OTU_clustCB_matrix, RowSideColors=colSideGBS2, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D2"), Rowv= CST_CBmapping_mult$CST_4)




