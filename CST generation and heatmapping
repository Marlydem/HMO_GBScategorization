%%%%%%%%%%%%%%%%%%%%%%%%%% R studio %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  "Community State Types Baseline"
#perform in R
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra) # clustering visualization
library(dendextend) # for comparing two dendrograms

library(rbiom)
library(vegan) #This is vegan 2.5-6
library(phyloseq)
library(ggplot2)

setwd("~/Desktop")


%%%%%%%%%%%%%%%%%%% on Baseline dataset %%%%%%%%%%%%%%%%%%%

OTU_1900_Baseline <- read.csv("Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/HMO_GBS_CST/exported/RelFreq_1900_Baseline/RelFreq_taxahead_Baseline.csv", header=TRUE, sep = ",", row.names="sample_name")
meta_BL <- read.csv("Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/sample_metadata_Baseline.csv")

setwd("~/Desktop/Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/HMO_GBS_CST")

d <- dist(OTU_1900_Baseline, method= "euclidean")
fit <- hclust(d, method="ward.D")
quartz()
plot(fit)

# Determine number of clusters
wss <- (nrow(OTU_1900_Baseline-1)*sum(apply(OTU_1900_Baseline,2,var)))
for (i in 2:15) wss[i] <- sum(kmeans(OTU_1900_Baseline,
                                     centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")
fviz_nbclust(OTU_1900_Baseline, FUNcluster = kmeans)

#Return to main code
group3 <- cutree(fit, k=3)
group4 <- cutree(fit, k=4)
group5 <- cutree(fit, k=5)
group6 <- cutree(fit, k=6)
table(group3) # Number of members in each cluster
table(group4)
table(group5)
table(group6)

plot(fit)
rect.hclust(fit, k=3, border="yellow")
rect.hclust(fit, k=4, border="red")
rect.hclust(fit, k=5, border="green")
rect.hclust(fit, k=6, border="blue")

fitplot5 <- kmeans(OTU_1900_Baseline, 5) # 5 cluster solution
fviz_cluster(fitplot5, OTU_1900_Baseline) #view PCA

print(group5)   
write.csv(group5,"CST_BL_mapping.csv")
#Manually add first column heading "Sample_id"
#merge the two tables metadata and CST
CST_BLmapping <- read.csv("CST_BL_mapping.csv.csv", header=TRUE, sep = ",", row.names="sample_name")
CST_BLmetadata <- read.csv("CST_metadata_Baseline.csv", header=TRUE, sep = ",", row.names="sample_name")


topN = 15
OTU_1900_BaselineT <- t(OTU_1900_Baseline)
OTU_1900_BaselineTtaxa <- otu_table(OTU_1900_BaselineT, taxa_are_rows = TRUE)
most_abundant_taxaBL = sort(taxa_sums(OTU_1900_BaselineTtaxa), TRUE)[1:topN]
print(most_abundant_taxaBL)
write.csv(most_abundant_taxaBL,"top15BL_taxa.csv")

most_abundant_taxa20BL = sort(taxa_sums(OTU_1900_BaselineTtaxa), TRUE)[1:20]
print(most_abundant_taxa20BL)
write.csv(most_abundant_taxa20BL,"top20BL_taxa.csv")

most_abundant_taxa30BL = sort(taxa_sums(OTU_1900_BaselineTtaxa), TRUE)[1:30]
print(most_abundant_taxa30BL)
write.csv(most_abundant_taxa25BL,"top30BL_taxa.csv")

#Use this to see what indices I need to remove or combine into "other" in the rarefied taxahead dataset
#increased top taxa so that clustering would match the original calls

%%Rename the CST values accordingly%%
  # CST I: Staphylococcus
  # CST II: Staph-Enterococcus
  # CST III: Enterococcus
  #CST IV: Lactobacillus
  #CST V: High alpha diversity, heterogenous bacteria
  #CST VI: GBS

  #First changed to CST and then back to numeric

OTU_BLre_ordername <- read.csv("exported/RelFreq_1900_Baseline/RelFreq_toptaxahead_Baseline.csv", header=TRUE, sep = ",", row.names="sample_name")

%%HEATMAP%%
  
install.packages("RColorBrewer")
library("RColorBrewer")
library("grDevices")

OTU_reno_clustBL_matrix <- as.matrix(OTU_BLre_ordername)
heatmap(OTU_reno_clustBL_matrix) #sideways without CST categorization

#will use mapping and shortened df (Other)
#the all-encompassing code!!!!!!!!
#tochangeCST in Excel =IF(B2=1,"I",IF(B2=2,"V",IF(B2=3,"III",IF(B2=4,"II",IF(B2=5,"IV",FALSE)))))
colMainGBS <- colorRampPalette(brewer.pal(9, "BuPu"))(25)

my_group_BL <- as.numeric(as.factor(substr(CST_BLmapping$x,1,1)))
mycol <- c("tomato","yellow","lightseagreen","orange","royalblue","#c51b8a")
colSide_BL <- mycol[my_group_BL]



OTU_BL_top35ordername <- read.csv("exported/RelFreq_1900_Baseline/RelFreq_top35taxahead_Baseline.csv", header=TRUE, sep = ",", row.names="sample_name")
OTU_BL_top35matrix <- as.matrix(OTU_BL_top35ordername)
heatmap(OTU_BL_top35matrix, cexCol = 0.8, RowSideColors=colSide_BL, col=colMainGBS, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"))


#saving files. preferred to save PDF and export as png 1500 pixels per inche
tiff(file="Heatmap_Baseline_BuPu.tif")
heatmap(OTU_BL_top35matrix, cexCol = 0.8, RowSideColors=colSide_BL,  col=colMainGBS, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"))
dev.off()
png(file="Heatmap_Baseline_BuPu.png")
heatmap(OTU_BL_top35matrix, cexCol = 0.8, RowSideColors=colSide_BL,  col=colMainGBS, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"))
dev.off()

%%%%%%%%%%%%%%% on GBS dataset %%%%%%%%%%%%%%%
#########################################################3
  
%%GBS from Study 16 alone%%
setwd("~/Desktop")

OTU_1900_GBSstudy <- read.csv("Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/HMO_GBS_CST/exported/RelFreq_1900_GBSstudy/RelFreq_taxahead_GBSstudy.csv", header=TRUE, sep = ",", row.names="sample_name")
meta_GBSstudy <- read.csv("Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/sample_metadata_GBSstudy.csv")

setwd("~/Desktop/Patras_Lab/Combined Mouse vaginal microbiome and HMO-GBS study/HMO_GBS_CST")

dGBSst16 <- dist(OTU_1900_GBSstudy, method= "euclidean")
fitGBSst16 <- hclust(dGBSst16, method="ward.D")
quartz()
plot(fitGBSst16)

# Determine number of clusters
wssGBSst16 <- (nrow(OTU_1900_GBSstudy-1)*sum(apply(OTU_1900_GBSstudy,2,var)))
for (i in 2:15) wssGBSst16[i] <- sum(kmeans(OTU_1900_GBSstudy,
                                            centers=i)$withinss)
#the above two lines didn't work, so skipped and we decided on 6 groups anyways...
plot(1:15, wssGBSst16, type="b", xlab="Number of Clusters",
     ylab="Within groups sum of squares")

#Return to main code
group3GBSst16 <- cutree(fitGBSst16, k=3)
group4GBSst16 <- cutree(fitGBSst16, k=4)
group5GBSst16 <- cutree(fitGBSst16, k=5)
group6GBSst16 <- cutree(fitGBSst16, k=6)
table(group3GBSst16) # Number of members in each cluster
table(group4GBSst16)
table(group5GBSst16)
table(group6GBSst16)

plot(fitGBSst16)
rect.hclust(fitGBSst16, k=3, border="yellow")
rect.hclust(fitGBSst16, k=4, border="red")
rect.hclust(fitGBSst16, k=5, border="green")
rect.hclust(fitGBSst16, k=6, border="Blue")

print(group6GBSst16)   
write.csv(group6GBSst16,"CST_GBSstudy_mapping.csv")
#merge the two tables- OTU_1900_Combined and CST_CB_mapping.csv ,- read in as such
#Manually add first column heading "Sample_id"
CST_GBSstudy_mapping <- read.csv("CST_GBSstudy_mapping.csv", header=TRUE, sep = ",", row.names="sample_name")
CST_GBSstudy_metadata <- read.csv("CST_metadata_GBSstudy.csv", header=TRUE, sep = ",", row.names="sample_name")

topN = 15
OTU_1900_GBSstudyT <- t(OTU_1900_GBSstudy)
OTU_1900_GBSstudy_taxa <- otu_table(OTU_1900_GBSstudyT, taxa_are_rows = TRUE)
most_abundant_taxaGBSstudy = sort(taxa_sums(OTU_1900_GBSstudy_taxa), TRUE)[1:topN]
print(most_abundant_taxaGBSstudy)
write.csv(most_abundant_taxaGBSstudy,"top15GBSst_taxa.csv")

most_abundant_taxa20GBSst = sort(taxa_sums(OTU_1900_GBSstudy_taxa), TRUE)[1:20]
print(most_abundant_taxa20GBSst)
write.csv(most_abundant_taxa20GBSst,"top20GGBSst_taxa.csv")

OTU_GBSre_ordername <- read.csv("exported/RelFreq_1900_GBSstudy/RelFreq_top24taxahead_GBSstudy.csv", header=TRUE, sep = ",", row.names="sample_name")

#Use this to see what indices I need to remove or combine into "other"

%%Rename the CST values accordingly%%
  # CST I: Staphylococcus
  # CST II: Staph-Enterococcus
  # CST III: Enterococcus
  #CST IV: Lactobacillus
  #CST V: High alpha diversity, heterogenous bacteria
  #CST VI: GBSst16
  
%%HEATMAP%%
  
OTU_clustGBS_matrix <- as.matrix(OTU_GBSre_ordername)

#for CST
my_group_GBS <- as.numeric(as.factor(substr(CST_GBSstudy_mapping$x,1,1)))
mycolGBS <- c("tomato","yellow","orange","lightseagreen","royalblue","#c51b8a")
colSideGBS <- mycolGBS[my_group_GBS]
heatmap(OTU_clustGBS_matrix, cexCol = 0.8, RowSideColors=colSideGBS, col=colMainGBS, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"))
        legend(x="right",legend)
        
#for treatment
my_group_GBStrx <- as.numeric(as.factor(substr(CST_GBSstudy_metadata$trx,1,1)))
trxcol <- c("#ecebe2","#9fc3cc","#466566","#09496c")
colSideGBStrx <- trxcol[my_group_GBStrx]
heatmap(OTU_clustGBS_matrix, cexCol = 0.8, RowSideColors=colSideGBStrx, col=colMainGBS,Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"))

#for timepoint
my_group_GBStp <- as.numeric(as.factor(substr(CST_GBSstudy_metadata$timepoint,1,1)))
tpcol <- c("#cc9595","#e3d4d7","#938b97","#617dbf","#152F50")
colSideGBStp <- tpcol[my_group_GBStp]
heatmap(OTU_clustGBS_matrix, cexCol = 0.8, RowSideColors=colSideGBStp, col=colMainGBS, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"))


#saving images
tiff(file="Heatmap_GBS_CST_bupu.tif")
heatmap(OTU_clustGBS_matrix, cexCol = 0.8, RowSideColors=colSideGBS, col=colMainGBS, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"))
dev.off()
tiff(file="Heatmap_GBS_trx_bupu.tif")
heatmap(OTU_clustGBS_matrix, cexCol = 0.8, RowSideColors=colSideGBStrx, col=colMainGBS, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"))
dev.off()
tiff(file="Heatmap_GBS_tp_bupu.tif")
heatmap(OTU_clustGBS_matrix, cexCol = 0.8, RowSideColors=colSideGBStp, col=colMainGBS, Colv= NA, distfun = function(x) dist(x, method="euclidean"), hclustfun = function(x) hclust(x, method="ward.D"))
dev.off()

#image legend scale for body of heatmap
image(1:nrow(OTU_clustGBS_matrix), 1, as.matrix(1:nrow(OTU_clustGBS_matrix)), 
      col=colorRampPalette(brewer.pal(9, "BuPu"))(25),
      xlab="", ylab = "", xaxt = "n", yaxt = "n", bty = "n")
